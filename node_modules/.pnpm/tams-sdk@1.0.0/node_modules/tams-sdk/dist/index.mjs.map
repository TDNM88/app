{"version":3,"sources":["../__generated__/apis/tams.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\nexport interface CreateJobRequestStage {\n  /**\n   * stage type\n   * stage type\n   */\n  type: TamsApiStageTypeT\n  inputInitialize?: TamsApiInputInitializeInput\n  diffusion?: TamsApiDiffusionInput\n  imageToUpscaler?: TamsApiImageToUpscalerInput\n  imageToAdetailer?: TamsApiImageToAdetailerInput\n  imageToInpaint?: TamsApiImageToInpaintInput\n}\n\n/** @default \"DEFAULT\" */\nexport enum ImageToInpaintInputInpaintFillT {\n  DEFAULT = 'DEFAULT',\n  FILL = 'FILL',\n  ORIGINAL = 'ORIGINAL',\n  LATENT_NOISE = 'LATENT_NOISE',\n  LATENT_NOTHING = 'LATENT_NOTHING',\n}\n\n/** @default \"DEFAULT\" */\nexport enum ImageToInpaintInputResizeModeT {\n  DEFAULT = 'DEFAULT',\n  JUST_RESIZE = 'JUST_RESIZE',\n  CROP_AND_RESIZE = 'CROP_AND_RESIZE',\n  RESIZE_AND_FILL = 'RESIZE_AND_FILL',\n  JUST_RESIZE_LATENT_UPSCALE = 'JUST_RESIZE_LATENT_UPSCALE',\n}\n\nexport interface LoraItem {\n  loraModel?: string\n  /** @format float */\n  weight?: number\n  /**\n   * lora block weight, value such as \\<weight\\>:lbw=\\<layer weight\\>\n   * example: \"1:lbw=1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0\"\n   */\n  blockWeight?: string\n}\n\n/** @default \"DEFAULT\" */\nexport enum ProjectModelTypeT {\n  DEFAULT = 'DEFAULT',\n  CHECKPOINT = 'CHECKPOINT',\n  TEXTUAL_INVERSION = 'TEXTUAL_INVERSION',\n  HYPERNETWORK = 'HYPERNETWORK',\n  AESTHETIC_GRADIENT = 'AESTHETIC_GRADIENT',\n  LORA = 'LORA',\n  LOCON = 'LOCON',\n  CONTROLNET = 'CONTROLNET',\n  POSES = 'POSES',\n  WILDCARDS = 'WILDCARDS',\n  OTHER = 'OTHER',\n  LYCORIS = 'LYCORIS',\n}\n\nexport interface GooglerpcStatus {\n  /** @format int32 */\n  code?: number\n  message?: string\n  details?: ProtobufAny[]\n}\n\nexport interface ProtobufAny {\n  '@type'?: string\n  [key: string]: any\n}\n\n/**\n * `NullValue` is a singleton enumeration to represent the null value for the\n * `Value` type union.\n *\n *  The JSON representation for `NullValue` is JSON `null`.\n *\n *  - NULL_VALUE: Null value.\n * @default \"NULL_VALUE\"\n */\nexport enum ProtobufNullValue {\n  NULL_VALUE = 'NULL_VALUE',\n}\n\nexport interface TamsApiAdetailerArg {\n  /** @default \"face_yolov8n.pt\" */\n  adModel?: string\n  adPrompt?: TamsApiPrompt[]\n  adNegativePrompt?: TamsApiPrompt[]\n  /**\n   * @format float\n   * @default \"face_yolov8n.pt\"\n   */\n  adConfidence?: number\n  /**\n   * @format int32\n   * @default \"4\"\n   */\n  adDilateErode?: number\n  /** @default \"None\" */\n  adMaskMergeInvert?: string\n  /**\n   * @format float\n   * @default \"0.4\"\n   */\n  adDenoisingStrength?: number\n  /** @default \"true\" */\n  adInpaintOnlyMasked?: boolean\n  /**\n   * @format float\n   * @default \"32\"\n   */\n  adInpaintOnlyMaskedPadding?: number\n  /** @default \"false\" */\n  adUseInpaintWidthHeight?: boolean\n  /**\n   * @format int32\n   * @default \"512\"\n   */\n  adInpaintWidth?: number\n  /**\n   * @format int32\n   * @default \"512\"\n   */\n  adInpaintHeight?: number\n  /** @default \"false\" */\n  adUseSteps?: boolean\n  /**\n   * @format int32\n   * @default \"20\"\n   */\n  adSteps?: number\n  /** @default \"false\" */\n  adUseCfgScale?: boolean\n  /**\n   * @format float\n   * @default \"7\"\n   */\n  adCfgScale?: number\n  lora?: TamsApiLora\n}\n\nexport interface TamsApiCancelJobResponse {\n  /** @format uint64 */\n  jobId?: string\n}\n\nexport interface TamsApiControlnet {\n  args?: TamsApiControlnetArgs[]\n}\n\nexport interface TamsApiControlnetArgs {\n  inputImageResourceId?: string\n  mask?: string\n  /**\n   * The model to use for the controlnet preprocessor\n   * support\n   * @example {}\n   */\n  preprocessor: string\n  /**\n   * The model to use for the controlnet\n   * support list: [\"control_v11p_sd15_openpose\",\"control_v11p_sd15_canny\",\"control_v11f1p_sd15_depth\",\"control_v11p_sd15_lineart\",\"control_v11p_sd15s2_lineart_anime\",\"control_v11p_sd15_mlsd\",\"control_v11p_sd15_normalbae\",\"control_v11p_sd15_scribble\",\"control_v11p_sd15_softedge\",\"control_v11p_sd15_seg\",\"control_v11e_sd15_shuffle\",\"t2iadapter_color_sd14v1\",\"control_v11f1e_sd15_tile\",\"control_v11e_sd15_ip2p\",\"control_v1p_sd15_qrcode_monster\",\"control_v1p_sd15_brightness\", \"None\"]\n   * @example {}\n   */\n  model: string\n  /** @format float */\n  weight?: number\n  resizeMode?: string\n  /** @format float */\n  guidance?: number\n  /** @format float */\n  guidanceStart?: number\n  /** @format float */\n  guidanceEnd?: number\n  controlMode?: string\n  pixelPerfect?: boolean\n  preprocessorParams?: object\n}\n\nexport interface TamsApiCreateJobRequest {\n  /** ensure request idempotence, should be unique */\n  requestId: string\n  /** stages to be executed */\n  stages: CreateJobRequestStage[]\n  notifyUrl?: string\n}\n\nexport interface TamsApiCreateJobResponse {\n  job?: TamsApiJobInfoForClient\n}\n\nexport interface TamsApiCreateResourceImageRequest {\n  /** @format int64 */\n  expireSec?: string\n  /**\n   * term of resource, 1-short(keep 7days) 2-long(keep forever)\n   * @format int32\n   */\n  term?: number\n}\n\nexport interface TamsApiCreateResourceImageResponse {\n  resourceId?: string\n  putUrl?: string\n  headers?: object\n}\n\nexport interface TamsApiCreateResourceImageSTSRequest {\n  /** @format int64 */\n  expireSec?: string\n  /**\n   * term of resource, 1-short(keep 7days) 2-long(keep forever)\n   * @format int32\n   */\n  term?: number\n}\n\nexport interface TamsApiCreateResourceImageSTSResponse {\n  resourceId?: string\n  accessId?: string\n  signature?: string\n  host?: string\n  expire?: string\n  callback?: string\n  filePath?: string\n  policy?: string\n  securityToken?: string\n}\n\nexport interface TamsApiDiffusionInput {\n  /**\n   * Height of the image in pixels. Must be in increments of 64 and pass the following validation:\n   * - For 512 engines: 262,144 ≤ height * width ≤ 1,048,576, Maximum 1024\n   * - For 768 engines: 589,824 ≤ height * width ≤ 1,048,576, Maximum 1024\n   * - For SDXL v1.0: 262,144 ≤ height * width ≤ 2,073,600, Maximum 1536\n   * @format int64\n   * @min 512\n   * @max 1536\n   * @default \"512\"\n   */\n  width: number\n  /**\n   * Height of the image in pixels. Must be in increments of 64 and pass the following validation:\n   * - For 512 engines: 262,144 ≤ height * width ≤ 1,048,576, Maximum 1024\n   * - For 768 engines: 589,824 ≤ height * width ≤ 1,048,576, Maximum 1024\n   * - For SDXL v1.0: 262,144 ≤ height * width ≤ 2,073,600, Maximum 1536\n   * @format int64\n   * @min 512\n   * @max 1536\n   * @default \"512\"\n   */\n  height: number\n  /**\n   * An array of text prompts to use for generation. Given a text prompt with the text A lighthouse on a cliff and a weight of 0.5, it would be represented as:\n   * @example {}\n   */\n  prompts: TamsApiPrompt[]\n  /**\n   * An array of text negative prompts to use for generation. Given a text prompt with the text A lighthouse on a cliff and a weight of 0.5, it would be represented as:\n   * @example {}\n   */\n  negativePrompts: TamsApiPrompt[]\n  /**\n   * The model to use for the diffusion\n   * @example {}\n   */\n  sdModel?: string\n  /**\n   * The vae to use for the diffusion\n   * support list: [\"Automatic\",\"None\",\"vae-ft-mse-840000-ema-pruned.ckpt\",\"kl-f8-anime.ckpt\",\"kl-f8-anime2.ckpt\",\"YOZORA.vae.pt\",\"orangemix.vae.pt\",\"blessed2.vae.pt,animevae.pt\",\"ClearVAE.safetensors\",\"pastel-waifu-diffusion.vae.pt\"]\n   * @example {}\n   */\n  sdVae?: string\n  /**\n   * Which sampler to use for the diffusion process. If this value is omitted we'll automatically select an appropriate sampler for you.\n   * support list: [\"Euler a\",\"Euler\",\"LMS\",\"Heun\",\"DPM2\",\"DPM2 a\",\"DPM++ 2S a\",\"DPM++ 2M\",\"DPM++ SDE\",\"DPM++ 2M SDE\",\"DPM fast\",\"LMS Karras\",\"DPM2 Karras\",\"DPM2 a Karras\",\"DPM++ 2S a Karras\",\"DPM++ 2M Karras\",\"DPM++ SDE Karras\",\"DPM++ 2M SDE Karras\"]\n   */\n  sampler?: string\n  /**\n   * Number of diffusion steps to run.\n   * @format int32\n   * @min 10\n   * @max 50\n   * @default \"0\"\n   */\n  steps?: number\n  /**\n   * How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)\n   * @format float\n   * @max 35\n   * @default \"7\"\n   */\n  cfgScale?: number\n  /** @format int32 */\n  clipSkip?: number\n  /** @format float */\n  denoisingStrength?: number\n  /** @format int32 */\n  etaNoiseSeedDelta?: number\n  controlnet?: TamsApiControlnet\n  lora?: TamsApiLora\n}\n\nexport interface TamsApiFailedInfo {\n  reason?: string\n  /** already finished stages info */\n  stages?: TamsApiStageInfo[]\n}\n\nexport interface TamsApiGetJobResponse {\n  job?: TamsApiJobInfoForClient\n}\n\nexport interface TamsApiGetModelResponse {\n  model?: TamsApiModel\n}\n\nexport interface TamsApiImageToAdetailerInput {\n  args?: TamsApiAdetailerArg[]\n  diffusion?: TamsApiDiffusionInput\n}\n\nexport interface TamsApiImageToInpaintInput {\n  /** JUST_RESIZE */\n  resizeMode?: ImageToInpaintInputResizeModeT\n  maskImageResourceId?: string\n  /**\n   * 4\n   * @format int64\n   */\n  maskBlur?: number\n  /** ORIGINAL */\n  inpaintingFill?: ImageToInpaintInputInpaintFillT\n  /** true */\n  inpaintFullRes?: boolean\n  /**\n   * 32\n   * @format int64\n   */\n  inpaintFullResPadding?: number\n  /**\n   * 0\n   * @format int64\n   */\n  inpaintMaskInvert?: number\n  diffusion?: TamsApiDiffusionInput\n}\n\nexport interface TamsApiImageToUpscalerInput {\n  /**\n   * The model to use for the upscaling\n   * - 262,144 ≤ hr_resize_x * hr_resize_y ≤ 2,073,600\n   * support list: [\"Latent\",\"Latent (antialiased)\",\"Latent (bicubic)\",\"Latent (bicubic antialiased)\",\"Latent (nearest)\",\"Latent (nearest-exact)\",\"None\",\"Lanczos\",\"Nearest\",\"4x-UltraSharp\",\"4x_foolhardy_Remacri\",\"ESRGAN_4x\",\"R-ESRGAN 4x+\",\"R-ESRGAN 4x+ Anime6B\",\"4x_NMKD-Siax_200k\",\"4x-AnimeSharp\",\"4x_NMKD-Superscale-SP_178000_G\",\"SwinIR_4x\",\"8x_NMKD-Superscale_150000_G\",]\n   * @example {}\n   */\n  hrUpscaler: string\n  /**\n   * hr_scale or hr_resize_x must be specified. If hr_scale is specified, hr_resize_x will be ignored.\n   * Height of the image upscaler in pixels. Must be in increments of 64 and pass the following validation:\n   * - 262,144 ≤ hr_resize_x * hr_resize_y ≤ 2,073,600\n   * @format int64\n   * @min 128\n   */\n  hrResizeX?: number\n  /**\n   * hr_scale or hr_resize_y must be specified. If hr_scale is specified, hr_resize_y will be ignored.\n   * Height of the image upscaler in pixels. Must be in increments of 64 and pass the following validation:\n   * - 262,144 ≤ hr_resize_x * hr_resize_y ≤ 2,073,600\n   * @format int64\n   * @min 128\n   */\n  hrResizeY?: number\n  /**\n   * The size to use for the upscaling\n   * - 262,144 ≤ hr_resize_x * hr_resize_y ≤ 2,073,600\n   * @format int32\n   * @example {}\n   */\n  hrScale?: number\n  /**\n   * Number of diffusion steps to run.\n   * @format int32\n   * @example {}\n   */\n  hrSecondPassSteps: number\n  /**\n   * denoising_strength\n   * @format float\n   * @example {}\n   */\n  denoisingStrength: number\n  /**\n   * if has diffusion stage, this diffusion will be ignored, else need to be specified\n   * @example {}\n   */\n  diffusion?: TamsApiDiffusionInput\n}\n\nexport interface TamsApiInputInitializeInput {\n  /**\n   * Random noise seed (omit this option or use 0 for a random seed).\n   * @format int64\n   * @max 4294967295\n   * @default \"0\"\n   */\n  seed?: string\n  /** Image used to initialize the diffusion process, in lieu of random noise. */\n  imageResourceId?: string\n  /**\n   * Number of images to generate\n   * @format int32\n   * @min 1\n   * @max 4\n   * @default \"1\"\n   */\n  count?: number\n}\n\nexport interface TamsApiJobInfoForClient {\n  /**\n   * job id\n   * @format uint64\n   */\n  id?: string\n  /** job status */\n  status?: TamsApiJobStatusT\n  /** waiting info, when status is waiting will return this */\n  waitingInfo?: TamsApiWaitingInfo\n  /** failed info, when status is failed will return this */\n  failedInfo?: TamsApiFailedInfo\n  /** running info, when status is running will return this */\n  runningInfo?: TamsApiRunningInfo\n  /** success info, when status is success will return this */\n  successInfo?: TamsApiSuccessInfo\n}\n\n/** @default \"DEFAULT\" */\nexport enum TamsApiJobStatusT {\n  DEFAULT = 'DEFAULT',\n  CREATED = 'CREATED',\n  PENDING = 'PENDING',\n  RUNNING = 'RUNNING',\n  CANCELED = 'CANCELED',\n  SUCCESS = 'SUCCESS',\n  FAILED = 'FAILED',\n  WAITING = 'WAITING',\n}\n\nexport interface TamsApiLora {\n  items?: LoraItem[]\n}\n\nexport interface TamsApiModel {\n  /** @format uint64 */\n  id?: string\n  name?: string\n  description?: string\n  baseModel?: string\n  modelType?: ProjectModelTypeT\n  showcaseImageUrls?: string[]\n  projectName?: string\n}\n\nexport interface TamsApiProcessingImage {\n  resourceImage?: TamsApiResourceForClient\n  /** @format int32 */\n  progress?: number\n}\n\nexport interface TamsApiPrompt {\n  text?: string\n  /** @format float */\n  weight?: number\n}\n\nexport interface TamsApiResourceForClient {\n  id?: string\n  url?: string\n  /** @format int64 */\n  expiredIn?: string\n}\n\nexport interface TamsApiRunningInfo {\n  /** already finished stages or running stages info */\n  stages?: TamsApiStageInfo[]\n}\n\nexport interface TamsApiStageInfo {\n  /**\n   * stage in job index\n   * @format int64\n   */\n  stageIndex?: string\n  processingImages?: TamsApiProcessingImage[]\n}\n\n/** @default \"DEFAULT\" */\nexport enum TamsApiStageTypeT {\n  DEFAULT = 'DEFAULT',\n  INPUT_INITIALIZE = 'INPUT_INITIALIZE',\n  DIFFUSION = 'DIFFUSION',\n  IMAGE_TO_UPSCALER = 'IMAGE_TO_UPSCALER',\n  IMAGE_TO_ADETAILER = 'IMAGE_TO_ADETAILER',\n  IMAGE_TO_INPAINT = 'IMAGE_TO_INPAINT',\n}\n\nexport interface TamsApiSuccessInfo {\n  /** final output images */\n  images?: TamsApiResourceForClient[]\n  /** all stages info */\n  stages?: TamsApiStageInfo[]\n}\n\nexport interface TamsApiWaitingInfo {\n  /** @format int64 */\n  queueRank?: string\n}\n\nexport type QueryParamsType = Record<string | number, any>\nexport type ResponseFormat = keyof Omit<Body, 'body' | 'bodyUsed'>\n\nexport interface FullRequestParams extends Omit<RequestInit, 'body'> {\n  /** set parameter to `true` for call `securityWorker` for this request */\n  secure?: boolean\n  /** request path */\n  path: string\n  /** content type of request body */\n  type?: ContentType\n  /** query params */\n  query?: QueryParamsType\n  /** format of response (i.e. response.json() -> format: \"json\") */\n  format?: ResponseFormat\n  /** request body */\n  body?: unknown\n  /** base url */\n  baseUrl?: string\n  /** request cancellation token */\n  cancelToken?: CancelToken\n}\n\nexport type RequestParams = Omit<FullRequestParams, 'body' | 'method' | 'query' | 'path'>\n\nexport interface ApiConfig<SecurityDataType = unknown> {\n  baseUrl?: string\n  baseApiParams?: Omit<RequestParams, 'baseUrl' | 'cancelToken' | 'signal'>\n  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void\n  customFetch?: typeof fetch\n}\n\nexport interface HttpResponse<D extends unknown, E extends unknown = unknown> {\n  data: D\n  error: E\n  headers: Headers\n  ok: boolean\n}\n\ntype CancelToken = Symbol | string | number\n\nexport enum ContentType {\n  Json = 'application/json',\n  FormData = 'multipart/form-data',\n  UrlEncoded = 'application/x-www-form-urlencoded',\n  Text = 'text/plain',\n}\n\nexport class HttpClient<SecurityDataType = unknown> {\n  public baseUrl: string = 'https://tams.tensor.art'\n  private securityData: SecurityDataType | null = null\n  private securityWorker?: ApiConfig<SecurityDataType>['securityWorker']\n  private abortControllers = new Map<CancelToken, AbortController>()\n  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams)\n\n  private baseApiParams: RequestParams = {\n    credentials: 'same-origin',\n    headers: {},\n    redirect: 'follow',\n    referrerPolicy: 'no-referrer',\n  }\n\n  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {\n    Object.assign(this, apiConfig)\n  }\n\n  public setSecurityData = (data: SecurityDataType | null) => {\n    this.securityData = data\n  }\n\n  protected encodeQueryParam(key: string, value: any) {\n    const encodedKey = encodeURIComponent(key)\n    return `${encodedKey}=${encodeURIComponent(typeof value === 'number' ? value : `${value}`)}`\n  }\n\n  protected addQueryParam(query: QueryParamsType, key: string) {\n    return this.encodeQueryParam(key, query[key])\n  }\n\n  protected addArrayQueryParam(query: QueryParamsType, key: string) {\n    const value = query[key]\n    return value.map((v: any) => this.encodeQueryParam(key, v)).join('&')\n  }\n\n  protected toQueryString(rawQuery?: QueryParamsType): string {\n    const query = rawQuery || {}\n    const keys = Object.keys(query).filter((key) => 'undefined' !== typeof query[key])\n    return keys\n      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))\n      .join('&')\n  }\n\n  protected addQueryParams(rawQuery?: QueryParamsType): string {\n    const queryString = this.toQueryString(rawQuery)\n    return queryString ? `?${queryString}` : ''\n  }\n\n  private contentFormatters: Record<ContentType, (input: any) => any> = {\n    [ContentType.Json]: (input: any) =>\n      input !== null && (typeof input === 'object' || typeof input === 'string') ? JSON.stringify(input) : input,\n    [ContentType.Text]: (input: any) => (input !== null && typeof input !== 'string' ? JSON.stringify(input) : input),\n    [ContentType.FormData]: (input: any) =>\n      Object.keys(input || {}).reduce((formData, key) => {\n        const property = input[key]\n        formData.append(\n          key,\n          property instanceof Blob\n            ? property\n            : typeof property === 'object' && property !== null\n            ? JSON.stringify(property)\n            : `${property}`,\n        )\n        return formData\n      }, new FormData()),\n    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),\n  }\n\n  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {\n    return {\n      ...this.baseApiParams,\n      ...params1,\n      ...(params2 || {}),\n      headers: {\n        ...(this.baseApiParams.headers || {}),\n        ...(params1.headers || {}),\n        ...((params2 && params2.headers) || {}),\n      },\n    }\n  }\n\n  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {\n    if (this.abortControllers.has(cancelToken)) {\n      const abortController = this.abortControllers.get(cancelToken)\n      if (abortController) {\n        return abortController.signal\n      }\n      return void 0\n    }\n\n    const abortController = new AbortController()\n    this.abortControllers.set(cancelToken, abortController)\n    return abortController.signal\n  }\n\n  public abortRequest = (cancelToken: CancelToken) => {\n    const abortController = this.abortControllers.get(cancelToken)\n\n    if (abortController) {\n      abortController.abort()\n      this.abortControllers.delete(cancelToken)\n    }\n  }\n\n  public request = async <T = any, E = any>({\n    body,\n    secure,\n    path,\n    type,\n    query,\n    format,\n    baseUrl,\n    cancelToken,\n    ...params\n  }: FullRequestParams): Promise<HttpResponse<T, E>> => {\n    const secureParams =\n      ((typeof secure === 'boolean' ? secure : this.baseApiParams.secure) &&\n        this.securityWorker &&\n        (await this.securityWorker(this.securityData))) ||\n      {}\n    const requestParams = this.mergeRequestParams(params, secureParams)\n    const queryString = query && this.toQueryString(query)\n    const payloadFormatter = this.contentFormatters[type || ContentType.Json]\n    const responseFormat = format || requestParams.format\n\n    return this.customFetch(`${baseUrl || this.baseUrl || ''}${path}${queryString ? `?${queryString}` : ''}`, {\n      ...requestParams,\n      headers: {\n        ...(requestParams.headers || {}),\n        ...(type && type !== ContentType.FormData ? { 'Content-Type': type } : {}),\n      },\n      signal: cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal,\n      body: typeof body === 'undefined' || body === null ? null : payloadFormatter(body),\n    }).then(async (response) => {\n      const r = {} as unknown as HttpResponse<T, E>\n      r.headers = response.headers\n      r.ok = response.ok\n\n      const data = !responseFormat\n        ? r\n        : await response[responseFormat]()\n            .then((data) => {\n              if (r.ok) {\n                r.data = data\n              } else {\n                r.error = data\n              }\n              return r\n            })\n            .catch((e: any) => {\n              r.error = e\n\n              return r\n            })\n\n      if (cancelToken) {\n        this.abortControllers.delete(cancelToken)\n      }\n\n      if (r.error) {\n        let message = 'Unknown Error'\n        if ((r.error as any).message) {\n          message = (r.error as any).message\n        }\n        const err = new Error(message) as any\n        err.response = r\n        throw err\n      }\n      return data\n    })\n  }\n}\n\n/**\n * @title TAMS API\n * @version v1\n * @baseUrl https://tams.tensor.art\n */\nexport class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {\n  v1 = {\n    /**\n     * @description create diffusion job\n     *\n     * @tags jobs\n     * @name TamsApiV1ServiceCreateJob\n     * @summary v1/jobs\n     * @request POST:/v1/jobs\n     */\n    tamsApiV1ServiceCreateJob: (body: TamsApiCreateJobRequest, params: RequestParams = {}) =>\n      this.request<TamsApiCreateJobResponse, GooglerpcStatus>({\n        path: `/v1/jobs`,\n        method: 'POST',\n        body: body,\n        type: ContentType.Json,\n        format: 'json',\n        ...params,\n      }),\n\n    /**\n     * @description get job\n     *\n     * @tags jobs\n     * @name TamsApiV1ServiceGetJob\n     * @summary v1/jobs\n     * @request GET:/v1/jobs/{jobId}\n     */\n    tamsApiV1ServiceGetJob: (jobId: string, params: RequestParams = {}) =>\n      this.request<TamsApiGetJobResponse, GooglerpcStatus>({\n        path: `/v1/jobs/${jobId}`,\n        method: 'GET',\n        format: 'json',\n        ...params,\n      }),\n\n    /**\n     * @description cancel job\n     *\n     * @tags jobs\n     * @name TamsApiV1ServiceCancelJob\n     * @summary v1/jobs\n     * @request DELETE:/v1/jobs/{jobId}\n     */\n    tamsApiV1ServiceCancelJob: (jobId: string, params: RequestParams = {}) =>\n      this.request<TamsApiCancelJobResponse, GooglerpcStatus>({\n        path: `/v1/jobs/${jobId}`,\n        method: 'DELETE',\n        format: 'json',\n        ...params,\n      }),\n\n    /**\n     * @description cancel job\n     *\n     * @tags models\n     * @name TamsApiV1ServiceGetModel\n     * @summary v1/models/{model_id}\n     * @request GET:/v1/models/{modelId}\n     */\n    tamsApiV1ServiceGetModel: (modelId: string, params: RequestParams = {}) =>\n      this.request<TamsApiGetModelResponse, GooglerpcStatus>({\n        path: `/v1/models/${modelId}`,\n        method: 'GET',\n        format: 'json',\n        ...params,\n      }),\n\n    /**\n     * @description create resource image\n     *\n     * @tags resource\n     * @name TamsApiV1ServiceCreateResourceImage\n     * @summary v1/resource/image\n     * @request POST:/v1/resource/image\n     */\n    tamsApiV1ServiceCreateResourceImage: (body: TamsApiCreateResourceImageRequest, params: RequestParams = {}) =>\n      this.request<TamsApiCreateResourceImageResponse, GooglerpcStatus>({\n        path: `/v1/resource/image`,\n        method: 'POST',\n        body: body,\n        type: ContentType.Json,\n        format: 'json',\n        ...params,\n      }),\n\n    /**\n     * @description create resource image sts\n     *\n     * @tags resource\n     * @name TamsApiV1ServiceCreateResourceImageSts\n     * @summary v1/resource/image/sts\n     * @request POST:/v1/resource/image/sts\n     */\n    tamsApiV1ServiceCreateResourceImageSts: (body: TamsApiCreateResourceImageSTSRequest, params: RequestParams = {}) =>\n      this.request<TamsApiCreateResourceImageSTSResponse, GooglerpcStatus>({\n        path: `/v1/resource/image/sts`,\n        method: 'POST',\n        body: body,\n        type: ContentType.Json,\n        format: 'json',\n        ...params,\n      }),\n  }\n}\n","import { Api } from '../__generated__/apis/tams'\nimport crypto from 'crypto'\nimport { fetch, Headers, File, Blob } from 'node-fetch-native'\nimport * as t from '../__generated__/apis/tams'\n\nexport { t }\n\ntype GetHeadersParams = {\n  resource: URL | RequestInfo\n  options?: RequestInit\n  appId: string\n}\n\ninterface AuthenticateStrategy {\n  getHeaders(params: GetHeadersParams): Headers\n}\n\nexport class Sha256RsaAuthenticateStrategy implements AuthenticateStrategy {\n  constructor(private privateKey: string) {}\n\n  getHeaders({ resource, options, appId }: GetHeadersParams) {\n    const method = options?.method ?? 'GET'\n    const url = new URL(resource.toString())\n    const path = url.pathname + url.search\n    const timestamp = Math.floor(Date.now() / 1000)\n    const nonce = Math.random().toString(16).slice(2)\n    const body = options?.body ? options.body.toString() : ''\n    const content = `${method}\\n${path}\\n${timestamp}\\n${nonce}\\n${body}`\n    const sign = crypto.createSign('RSA-SHA256')\n    sign.update(content)\n    const signature = sign.sign(this.privateKey, 'base64')\n    return new Headers({\n      authorization: `TAMS-SHA256-RSA app_id=${appId},nonce_str=${nonce},timestamp=${timestamp},signature=${signature}`,\n    })\n  }\n}\n\ntype TamsSDKOptions = {\n  appId: string\n  authenticateStrategy: AuthenticateStrategy\n  host?: string\n}\n\nexport class TamsSDK {\n  private api: Api<unknown>\n  private appId: string\n  private authenticateStrategy: AuthenticateStrategy\n  private host: string\n\n  constructor(options: TamsSDKOptions) {\n    this.appId = options.appId\n    this.authenticateStrategy = options.authenticateStrategy\n    this.host = options.host ?? 'tams-api.tensor.art'\n    this.api = new Api({\n      baseUrl: `https://${this.host}`,\n      customFetch: async (...fetchParams: Parameters<typeof fetch>) => {\n        const headers = this.authenticateStrategy.getHeaders({\n          resource: fetchParams[0],\n          options: fetchParams[1],\n          appId: this.appId,\n        })\n        fetchParams[1] = fetchParams[1] || {}\n        const init = fetchParams[1]\n        const nextHeaders = new Headers(init.headers || {})\n        headers.forEach((v, k) => {\n          nextHeaders.append(k, v)\n        })\n        fetchParams[1].headers = nextHeaders\n        const resp = await fetch.apply(globalThis, fetchParams)\n        return resp\n      },\n    })\n  }\n\n  get v1() {\n    return this.api.v1\n  }\n\n  async uploadFile({\n    file,\n  }: {\n    file: Buffer | ReadableStream | File | Blob\n  }): Promise<{ resourceId: string }> {\n    // TODO: 传什么\n    const resp = await this.api.v1.tamsApiV1ServiceCreateResourceImage({\n      expireSec: `${60 * 60}`,\n      term: 1,\n    })\n    console.log(`资源创建`, resp.data)\n\n    if (Buffer.isBuffer(file)) {\n      file = new Blob([file])\n    }\n\n    const uploadResp = await fetch(resp.data.putUrl!, {\n      headers: resp.data.headers as HeadersInit,\n      body: file,\n      method: 'PUT',\n    })\n\n    console.log(`上传资源完成`)\n\n    if (uploadResp.ok) {\n      return {\n        resourceId: resp.data.resourceId!,\n      }\n    }\n\n    throw new Error(`upload file failed: ${uploadResp.statusText}`)\n  }\n}\n"],"mappings":"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","names":["ImageToInpaintInputInpaintFillT","ImageToInpaintInputResizeModeT","ProjectModelTypeT","ProtobufNullValue","TamsApiJobStatusT","TamsApiStageTypeT","ContentType","abortController","data","fetch","Blob","fetch","Blob"]}